{"version":3,"sources":["components/users/UserItem.js","components/users/Users.js","components/users/UserProfile.js","components/layout/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["UserItem","user","showUserDetails","to","id","username","Users","users","List","map","ListItem","key","UserProfile","getUser","match","useEffect","params","name","email","address","phone","website","company","city","Navbar","AppBar","position","Toolbar","variant","Typography","color","App","state","a","async","axios","get","res","setState","data","render","Container","exact","path","props","this","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAQeA,EAJS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAA4B,EAAtBC,gBAC/B,OAAO,kBAAC,IAAD,CAAMC,GAAE,wBAAmBF,EAAKG,KAAOH,EAAKI,W,gBCgBtCC,EAhBM,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOL,EAAsB,EAAtBA,gBAC7B,OACE,kBAACM,EAAA,EAAD,KACGD,EAAME,KAAI,SAAAR,GAAI,OACb,kBAACS,EAAA,EAAD,CAAUC,IAAKV,EAAKG,IAClB,kBAAC,EAAD,CACEO,IAAKV,EAAKG,GACVH,KAAMA,EACNC,gBAAiBA,UC2BdU,EArCY,SAAC,GAA8B,IAA5BX,EAA2B,EAA3BA,KAAMY,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAK3C,GAJAC,qBAAU,WACRF,EAAQC,EAAME,OAAOZ,MACpB,IAEU,OAATH,EACF,MAAO,GAN8C,IAQ/CgB,EAA4DhB,EAA5DgB,KAAMZ,EAAsDJ,EAAtDI,SAAUa,EAA4CjB,EAA5CiB,MAAOC,EAAqClB,EAArCkB,QAASC,EAA4BnB,EAA5BmB,MAAOC,EAAqBpB,EAArBoB,QAASC,EAAYrB,EAAZqB,QACxD,OACE,6BACE,kBAAC,IAAD,CAAMnB,GAAG,aAAT,WACA,2BACE,yCADF,IAC0Bc,GAE1B,2BACE,6CADF,IAC8BZ,GAE9B,2BACE,0CADF,IAC2Ba,GAE3B,2BACE,0CADF,IAC2BE,GAE3B,2BACE,4CADF,IAC6BC,GAE7B,2BACE,4CADF,IAC6BF,EAAQI,MAErC,2BACE,4CADF,IAC6BD,EAAQL,Q,wBCf5BO,EAZO,WACpB,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CAAYD,QAAQ,KAAKE,MAAM,WAA/B,e,iCCwDOC,E,2MA1DbC,MAAQ,CACNzB,MAAO,GACPN,KAAM,M,EASRY,QAAU,SAAMT,GAAN,eAAA6B,EAAAC,OAAA,kEAAAD,EAAA,MACUE,IAAMC,IAAN,qDAC8BhC,KAFxC,OACFiC,EADE,OAIR,EAAKC,SAAS,CAAErC,KAAMoC,EAAIE,OAJlB,sC,EAOVrC,gBAAkB,a,EAElBsC,OAAS,WACP,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,aACLH,OAAQ,SAAAI,GAAK,OACX,kBAAC,WAAD,KACE,kBAAC,EAAD,CACErC,MAAO,EAAKyB,MAAMzB,MAClBL,gBAAiB,EAAKA,sBAK9B,kBAAC,IAAD,CACEwC,OAAK,EACLC,KAAK,qBACLH,OAAQ,SAAAI,GAAK,OACX,kBAAC,EAAD,iBACMA,EADN,CAEE3C,KAAM,EAAK+B,MAAM/B,KACjBY,QAAS,EAAKA,mB,qLAxCZsB,IAAMC,IAAN,+C,OAAZC,E,OAENQ,KAAKP,SAAS,CAAE/B,MAAO8B,EAAIE,O,sDATbO,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpC,MACvB,2DCZNqC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47b02329.chunk.js","sourcesContent":["import React from 'react';\r\n//import Link from '@material-ui/core/Link';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const UserItem = ({ user, showUserDetails }) => {\r\n  return <Link to={`user-app/user/${user.id}`}>{user.username}</Link>;\r\n};\r\n\r\nexport default UserItem;\r\n","import React from 'react';\r\nimport UserItem from './UserItem';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nexport const Users = ({ users, showUserDetails }) => {\r\n  return (\r\n    <List>\r\n      {users.map(user => (\r\n        <ListItem key={user.id}>\r\n          <UserItem\r\n            key={user.id}\r\n            user={user}\r\n            showUserDetails={showUserDetails}\r\n          />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const UserProfile = ({ user, getUser, match }) => {\r\n  useEffect(() => {\r\n    getUser(match.params.id);\r\n  }, []);\r\n\r\n  if (user === null) {\r\n    return '';\r\n  }\r\n  const { name, username, email, address, phone, website, company } = user;\r\n  return (\r\n    <div>\r\n      <Link to='/user-app'>Go Back</Link>\r\n      <p>\r\n        <strong>Name:</strong> {name}\r\n      </p>\r\n      <p>\r\n        <strong>Username:</strong> {username}\r\n      </p>\r\n      <p>\r\n        <strong>Email:</strong> {email}\r\n      </p>\r\n      <p>\r\n        <strong>Phone:</strong> {phone}\r\n      </p>\r\n      <p>\r\n        <strong>Website:</strong> {website}\r\n      </p>\r\n      <p>\r\n        <strong>Address:</strong> {address.city}\r\n      </p>\r\n      <p>\r\n        <strong>Company:</strong> {company.name}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <AppBar position='static'>\r\n      <Toolbar variant='dense'>\r\n        <Typography variant='h6' color='inherit'>\r\n          User App\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component, Fragment } from 'react';\nimport Users from './components/users/Users';\nimport UserProfile from './components/users/UserProfile';\nimport Navbar from './components/layout/Navbar';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    users: [],\n    user: null\n  };\n\n  async componentDidMount() {\n    const res = await axios.get(`https://jsonplaceholder.typicode.com/users`);\n\n    this.setState({ users: res.data });\n  }\n\n  getUser = async id => {\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    this.setState({ user: res.data });\n  };\n\n  showUserDetails = () => {};\n\n  render = () => {\n    return (\n      <Router>\n        <div>\n          <Navbar />\n          <Container>\n            <Switch>\n              <Route\n                exact\n                path='/user-app/'\n                render={props => (\n                  <Fragment>\n                    <Users\n                      users={this.state.users}\n                      showUserDetails={this.showUserDetails}\n                    />\n                  </Fragment>\n                )}\n              />\n              <Route\n                exact\n                path='/user-app/user/:id'\n                render={props => (\n                  <UserProfile\n                    {...props}\n                    user={this.state.user}\n                    getUser={this.getUser}\n                  />\n                )}\n              />\n            </Switch>\n          </Container>\n        </div>\n      </Router>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}