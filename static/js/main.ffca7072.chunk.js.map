{"version":3,"sources":["components/users/UserItem.js","components/users/Users.js","components/users/UserProfile.js","components/layout/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["getStyle","minWidth","textDecoration","UserItem","user","showUserDetails","Grid","item","xs","to","id","style","Card","CardContent","variant","component","username","Users","users","map","key","UserProfile","getUser","match","img","useEffect","params","name","email","address","phone","website","company","Box","m","Button","color","container","spacing","IconButton","Avatar","src","margin","width","height","alt","city","Navbar","AppBar","position","Toolbar","Typography","App","state","a","async","axios","get","res","setState","data","render","Container","exact","path","props","direction","alignItems","justify","this","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffca7072.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const UserItem = ({ user, showUserDetails }) => {\r\n  return (\r\n    <Grid item xs={6}>\r\n      <Link to={`/user-app/user/${user.id}`} style={getStyle()}>\r\n        <Card>\r\n          <CardContent variant='h5' component='h2'>\r\n            {user.username}\r\n          </CardContent>\r\n        </Card>\r\n      </Link>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getStyle = () => ({\r\n  minWidth: '100%',\r\n  textDecoration: 'none'\r\n});\r\n\r\nexport default UserItem;\r\n","import React, { Fragment } from 'react';\r\nimport UserItem from './UserItem';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport const Users = ({ users, showUserDetails }) => {\r\n  return (\r\n    <Fragment>\r\n      {users.map(user => (\r\n        <UserItem key={user.id} user={user} showUserDetails={showUserDetails} />\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Link } from 'react-router-dom';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nexport const UserProfile = ({ user, getUser, match, img }) => {\r\n  useEffect(() => {\r\n    getUser(match.params.id);\r\n  }, []);\r\n\r\n  if (user === null) {\r\n    return '';\r\n  }\r\n  const { name, username, email, address, phone, website, company } = user;\r\n  return (\r\n    <div>\r\n      <Box m={2} />\r\n      <Button variant='contained' color='secondary'>\r\n        <Link to='/user-app' style={{ textDecoration: 'none', color: 'white' }}>\r\n          Go Back\r\n        </Link>\r\n      </Button>\r\n      <Box m={2} />\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6}>\r\n          <IconButton>\r\n            <Avatar\r\n              src={img}\r\n              style={{\r\n                margin: '10px',\r\n                width: '500px',\r\n                height: '500px'\r\n              }}\r\n            />\r\n          </IconButton>\r\n          <img alt='' />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Box m={20} />\r\n\r\n          <div>\r\n            <p>\r\n              <strong>Name:</strong> {name}\r\n            </p>\r\n            <p>\r\n              <strong>Username:</strong> {username}\r\n            </p>\r\n            <p>\r\n              <strong>Email:</strong> {email}\r\n            </p>\r\n            <p>\r\n              <strong>Phone:</strong> {phone}\r\n            </p>\r\n            <p>\r\n              <strong>Website:</strong> {website}\r\n            </p>\r\n            <p>\r\n              <strong>Address:</strong> {address.city}\r\n            </p>\r\n            <p>\r\n              <strong>Company:</strong> {company.name}\r\n            </p>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <AppBar position='static'>\r\n      <Toolbar variant='dense'>\r\n        <Typography variant='h6' color='inherit'>\r\n          User App\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component, Fragment } from 'react';\nimport Users from './components/users/Users';\nimport UserProfile from './components/users/UserProfile';\nimport Navbar from './components/layout/Navbar';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    users: [],\n    user: null,\n    img: 'https://source.unsplash.com/1600x900/?people'\n  };\n\n  async componentDidMount() {\n    const res = await axios.get(`https://jsonplaceholder.typicode.com/users`);\n\n    this.setState({ users: res.data });\n  }\n\n  getUser = async id => {\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    this.setState({ user: res.data, img: this.state.img });\n  };\n\n  render = () => {\n    return (\n      <Router>\n        <div>\n          <Navbar />\n          <Container>\n            <Switch>\n              <Route\n                exact\n                path='/user-app/'\n                render={props => (\n                  <Fragment>\n                    <Box m={2} />\n                    <Grid\n                      spacing={2}\n                      container\n                      direction='row'\n                      alignItems='center'\n                      justify='center'\n                    >\n                      <Users\n                        users={this.state.users}\n                        showUserDetails={this.showUserDetails}\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n              />\n              <Route\n                exact\n                path='/user-app/user/:id'\n                render={props => (\n                  <UserProfile\n                    {...props}\n                    user={this.state.user}\n                    getUser={this.getUser}\n                    img={this.state.img}\n                  />\n                )}\n              />\n            </Switch>\n          </Container>\n        </div>\n      </Router>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}